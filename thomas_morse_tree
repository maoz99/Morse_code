#pragma once

#include "Binary_Tree.h"
#include <iostream>
#include <map>
using namespace std;

template<typename Item_Type>

class Morse_Tree : Binary_Tree<Item_Type>
{
public:
	Morse_Tree() : root(NULL) {}
	~Morse_Tree() {}
	void Decode(Morse_Tree<Item_Type> binary_tree, Item_Type input);
	void Encode(map<Item_Type, Item_Type> & morse_txt, Item_Type input);
	bool insert(Item_Type& item);
	bool insert(BTNode<Item_Type>*& local_root, Item_Type& item);

	/** Construct a Morse_Tree with a given node as the root */
	Morse_Tree(BTNode<Item_Type>* new_root) : root(new_root) {}
	//Data
	BTNode<Item_Type>* root;

protected:
};

template<typename Item_Type>
bool Morse_Tree<Item_Type>::insert(Item_Type& item)
{
	return insert(this->root, item);
}

template<typename Item_Type>
bool Morse_Tree<Item_Type>::insert(BTNode<Item_Type>*& local_root, Item_Type& item)
{

	/*for (Item_Type::iterator it = item.begin(); it != item.end(); ++it)*/ //This was the first attempt, switch the item.substr(i)'s to "it" 
	for (int i = 0; i<item.size(); i++) {//iterating through the string
		if ((item.substr(i) == ".") && (item.substr(i) != item.end())) {  //if the first index in the string is a ".", and we are not at the end of our string
			if (local_root->left == NULL) { //if the left is NULL
				local_root->left = new BTNode<Item_Type>(NULL); //insert a new BTNode there 
				local_root = local_root->left;
			}
		}
		else if ((item.substr(i) == "_") && (item.substr(i) != item.end())) {  //same as above but opposite
			if (local_root->right == NULL) {
				local_root->right = new BTNode<Item_Type>(NULL);
				local_root = local_root->right;
			}

		}
		else if (item.substr(i) == item.end()) {  //if we've made it to our destination, assign a new value to that spot
			local_root = new BTNode<Item_Type>(item);
			return true;
		}


	}
	return false;
	/*if (local_root == NULL) {
	local_root = new BTNode<Item_Type>(item);
	return true;
	}
	else {
	if (item < local_root->data)
	return insert(local_root->left, item);
	else if (local_root->data < item)
	return insert(local_root->right, item);
	else
	return false;
	}*/
}

template<typename Item_Type>
void Morse_Tree<Item_Type>::Decode(Morse_Tree<Item_Type> binary_tree, Item_Type input)
{
	//dots to letters
	cout << "Decoding output...\n";
	Morse_Tree<Item_Type> bt;
	bool change = false;
	for (int i = 0; i < input.length(); i++) { //for each character in the input string 
		if (input[i] == ' ') {
			cout << bt.data; //cout the letter corresponding to the code beforehand
			bt = binary_tree; //restart binary tree
			change = false; //restart change
		}
		else if (input[i] == '.') {
			if (change) { //if change == true or we are already looking through the tree
				bt = bt.get_left_subtree(); //move left 
			}
			else { //just look at the first left node
				bt = binary_tree.get_left_subtree();
				change = true; //we are moving further into tree
			}
		}
		else if (input[i] == '_') { // ^same
			if (change) {
				bt = bt.left;
			}
			else {
				bt = binary_tree.get_right_subtree();
				change = true;
			}
		}

	}
}

template<typename Item_Type>
void Morse_Tree<Item_Type>::Encode(map<Item_Type, Item_Type> & morse_txt, Item_Type input) {
	//Letters to dots
	map<string, string>::iterator iter; //create iterator to go through map
	cout << "Enocded message: ";
	for (int i = 0; i < input.length(); i++) {
		for (iter = morse_txt.begin(); iter != morse_txt.end(); iter++) { //iterate through map
			if (iter->first[0] == input[i]) { //iter->first calls key, if key = first index/alphabetic letter of inputted string:
				cout << iter->second; //cout the morse code associated to it 
				break;
			}

		}
	}
	cout << endl;
}
